/* eslint-disable no-unused-vars */
import 'normalize.css';
import '../styles/globals.css';
import React, { useEffect, useState, useRef, useLayoutEffect  } from "react";
import Head from "next/dist/next-server/lib/head";
import gsap from 'gsap';
import { ScrollTrigger } from "gsap/dist/ScrollTrigger";
import { ThemeProvider } from '@material-ui/core/styles';
import { useUpdateEffect } from 'react-use';
import CssBaseline from '@material-ui/core/CssBaseline';
// import { LocomotiveScrollProvider } from 'react-locomotive-scroll'
import { useRouter } from 'next/router';
import theme from '../theme';

import 'locomotive-scroll/dist/locomotive-scroll.css';

function MyApp({ Component, pageProps }) {
  const refLoco = useRef(null);
  const router = useRouter()
  const [scrollLoco, setScrollLoco] = useState(null);
  // const router = useRouter();
  // const [scrall, setScrall] = useState(null);
  // useEffect((el) => {
  //   console.log('I Start ONLY ONCE');
  //   let scroll = null;
  //   import('locomotive-scroll').then((locomotiveModule) => {

  //     // eslint-disable-next-line new-cap
  //     scroll = new locomotiveModule.default({
  //       el: document.querySelector("#__next"),
  //       smooth: true,
  //       resetNativeScroll: true
  //     });
  //     React.createContext(scroll);
  //     setTimeout(() => {
  //       scroll.init();
  //       setScrall(scroll);
  //     }, 100);
  //   });
    
  //   // return () => {
  //   //   // scroll.destroy();
  //   //   // document.querySelector('.c-scrollbar').remove()
  //   // }
  // }, []);

  // useEffect(() => {
  //   if (scrall !== null) {
  //     scrall.start();
  //     console.log(scrall);
  //   }
  // }, [router])
  gsap.registerPlugin(ScrollTrigger);
  useEffect(() => {
    let scroll = null;
    if (scrollLoco !== null) return;
    import('locomotive-scroll').then((locomotiveModule) => {
      
      // eslint-disable-next-line new-cap
      scroll = new locomotiveModule.Smooth({
        el: refLoco.current,
        smooth: true,
        // resetNativeScroll: true
      });
      React.createContext(scroll);
      setScrollLoco(scroll);
      scroll.on('scroll', ScrollTrigger.update);
      scroll.on('scroll', () => {
      });
     ScrollTrigger.scrollerProxy(refLoco.current, {
          scrollTop(value) {
            return arguments.length ? scroll.scrollTo(value, 0, 0) : scroll.scroll.instance.scroll.y;
          }, // we don't have to define a scrollLeft because we're only scrolling vertically.
          getBoundingClientRect() {
            return {top: 0, left: 0, width: window.innerWidth, height: window.innerHeight};
          }
        });
        ScrollTrigger.refresh();
        ScrollTrigger.update();
      setTimeout(() => {
        // scroll.init();
        
      }, 100);
    });
    
    return () => {
      // scroll.destroy();
      // document.querySelector('.c-scrollbar').remove()
    }
  }, []);
  useUpdateEffect(() => {
    // refLoco.current.style.transform = '';
    if (scrollLoco !== null) {
      scrollLoco.update();
    }
  })
  return (
    <ThemeProvider theme={theme}>
      <Head>
        <title>Construction</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <CssBaseline />
      <div ref={refLoco} >
        <button style={{position: 'fixed', zIndex: 100}} onClick={() => {
          if (scrollLoco !== null) {
            scrollLoco.update();
          } 
        }}>Update</button>
        <Component gsap={gsap} ScrollTrigger={ScrollTrigger} scroll={scrollLoco} {...pageProps}/>
      </div>
    </ThemeProvider>
)
}

export default MyApp;
